input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  error: LoginError
  result: String
}

enum LoginError {
  INTERNAL
  INVALID_CREDENTIALS
}

input RegisterInput {
  email: String!
  password: String!
}

type RegisterPayload {
  error: RegisterError
  result: String
}

enum RegisterError {
  INTERNAL
  EXISTING
  PASSWORD_TOO_LONG
  PASSWORD_TOO_SHORT
}

scalar Cursor
scalar DateTime

type PageInfo {
  endCursor: Cursor
  startCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Mutation {
  login(input: LoginInput!): LoginPayload!
  register(input: RegisterInput!): RegisterPayload!
}

type Query {
  me: User
}
